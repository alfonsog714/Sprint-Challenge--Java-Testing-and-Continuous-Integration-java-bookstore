server.port=${PORT:2020}

# Begin h2 configuration
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#spring.h2.console.settings.web-allow-others=true
# End h2 configuration

# Begin PostgreSQL local configuration
#spring.datasource.url=jdbc:postgresql://localhost:5432/dbsprint
#spring.datasource.username=postgres
#spring.datasource.password=${MYDBPASSWORD:basketball714}
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
## End PostgreSQL local configuration

#Begin PostgreSQL heroku config
spring.datasource.url=${SPRING_DATA_URL:jdbc:postgresql://ec2-50-19-254-63.compute-1.amazonaws.com:5432/d8ntppskl3c3eg?user=sworeiblcrcbld&password=69eadd4a20b81f64544160fe240b7ddebf418bbc24ebbe4f736c00c49d9404df&sslmode=require}
spring.datasource.username=sworeiblcrcbld
spring.datasource.password=69eadd4a20b81f64544160fe240b7ddebf418bbc24ebbe4f736c00c49d9404df
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
#End config
#postgres://sworeiblcrcbld:69eadd4a20b81f64544160fe240b7ddebf418bbc24ebbe4f736c00c49d9404df@ec2-50-19-254-63.compute-1.amazonaws.com:5432/d8ntppskl3c3eg


# Begin PostgreSQL heroku configuration
# heroku config -a jrmmba-starthere
# postgres://rrwzjxlkniayov:83e8dc9dc5a3c3a30e40dde8fb62941da11030b3953709f5c8f808690e776c71@ec2-54-243-241-62.compute-1.amazonaws.com:5432/d7bl8dlv2l83jj
# posgress://username      :password                                                        @url                                      :5432/dbname
# check environment variables:
#      heroku run echo \$SPRING_DATASOURCE_URL -a jrmmba-starthere
#      heroku run echo \$SPRING_DATASOURCE_USERNAME -a jrmmba-starthere
#      heroku run echo \$SPRING_DATASOURCE_PASSWORD -a jrmmba-starthere
### If you environment variables get set, just use those!
#spring.datasource.url=${SPRING_DATASOURCE_URL}
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
### If your environment variables do not get set
#spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://ec2-54-243-241-62.compute-1.amazonaws.com:5432/d7bl8dlv2l83jj?user=rrwzjxlkniayov&password=83e8dc9dc5a3c3a30e40dde8fb62941da11030b3953709f5c8f808690e776c71&sslmode=require}
#spring.datasource.username=${SPRING_DATASOURCE_USERNAME:rrwzjxlkniayov}
#spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:83e8dc9dc5a3c3a30e40dde8fb62941da11030b3953709f5c8f808690}
#spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true
# End PostgreSQL heroku configuration

# What do with the schema
# drop n create table again, good for testing
spring.jpa.hibernate.ddl-auto=none
spring.datasource.initialization-mode=never
# Good for production!
#spring.jpa.hibernate.ddl-auto=update
#spring.datasource.initialization-mode=never


# Feature that determines what happens when no accessors are found for a type
# (and there are no annotations to indicate it is meant to be serialized).
spring.jackson.serialization.fail-on-empty-beans=false

# Turns off Spring Boot automatic exception handling
server.error.whitelabel.enabled=false

# needed for actuators to work
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always
management.endpoint.shutdown.enabled=true
